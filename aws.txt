

    SECTION 8  (continue )
    LEARNING AWS
Iam : Permissions : 

- Users or groups can be assigned JSON documents called policies
- These policlies define the permissions of the users 
- In AWS you apply the least privilege principle  : don’t give more
Permissions than a user needs

IAM Policies Structure
Consists of 
-	Version : policy language version 
-	Id : an identifier for the policy
-	Statement : one or more individual statements (required)
Statements consists of 
-	Sid : an identifier for the statement (optional)
-	Effect : whether the statement allows or denies access ( Allow , Deny)
-	Principal : account/user/role to which this policy applied to
-	Action : list of actions this policy allows or denies
-	Resource :list of resources to which the actions applied to
-	Condition : conditions for when this policy is in effect (optional)

IAM – PASSWORD POLICY
2 Defense mechanisms : 
-	Strong passwords = higher security for your account 
-	In AWS , you can setup a password policy

o	Set a minium password length
o	Require specific character types
	Including uppercase letters 
	Lowercase letters
	Number , or non alphanumeric character (ki tu dac biet )
o	Allow all IAM users to change their own passwords
o	Require user to change their password after some time (password exp)
o	Prevent password re-use
Multi Factor Authen – MFA
-	Users have acess to your account and can possibly change config or delete
Resources in your AWS account 
-	You want to protect your Root Accounts and IAM users
-	MFA = password you know + security device you own

Section 8
•	Application load balancer (v2)
•	Application load balancers is Layer 7 (HTTP)
•	Load balancing to multiple HTTP app (target groups)
•	Load balancing to multiple applications on the same machine 
•	Support for http/2 and websocket
•	Support redirects (http/https)
•	Routing tables to different target groups:
o	Routing path url
o	Routing hostname url
o	Routing on query string, header 
•	ALB are a great fit for micro and container app
•	Has a port mapping feature to redirect to dynamic port in ecs
•	In comparsion , we’d need multiple classic load balancer per application 
 
Application load balancer (v2) target group

•	EC2 instances (can be managed by an auto scaling group) – HTTP
•	ECS task (managed by ecs it self) -HTTP
•	Lambda function – HTTP req/ JSON event
•	Private IP address
•	ALB can route to multiple target group
•	Health checks are at the target group level

ALB (v2) Good to know
•	Fixed hostname 
•	the application servers don’t see the IP client 
	inserted in the header X-forwarded-for
Network Load Balancer (ELB v2)
•	Network load balancers (Layer 4 ) allow to
o	Forward TCP & UDP traffic to your instances
o	Handle millions of request per seconds 
o	Less latency ~100ms (vs 400 ms for ALB)
•	NLB as one static IP per AZ, and supports assigning Elastic IP
•	NLB as used for extreme performance , TCP or UDP traffic
•	Not free 

Gateway Load Balancer
•	Deploy scale , and manage a fleet of 3rd party network
•	Operates Layer 3 ( network layer ) – IP packets 
•	Combines the following function : 
o	Transparent network gateway
o	Load balancer
•	Uses the GENEVE port 6081
•	Ec2 instance
•	Private IP address
Sticky Sessions (Session Affinity)
•	This works for Classic Load balancers & application Load balancer
•	The “cookie” used for stickiness has an exp date
•	Enabling stickness may bring imbalance to the load over the be EC2
Sticky Sessions – Cookie Names 
•	Application-based Cookie
o	Custom cookie
	Don’t use AWSALB , AWSALPAPP , AWSALBTG
o	Application cookie
	As AWSALBAPP
•	Duration-based cookie
o	Cookie generated by the load balancer
o	Cookie name is AWSALB for alb , AWSELB

Cross-Zone Load balancing
•	Application Load Balancer
o	Always on 
o	No changes for inter AZ
•	Network Load Balancer
o	Default as disabled
o	Pay charges 
•	Classic Load Balancer
o	Disabled by default
o	No charges for inter AZ





Section 9 : 
SSL - Basics 
-   An ssl Certificate allows traffic between your clients and your load balancer
to be encrypted in transit 
-   SSL refer to Secure Sockets Layer , used to Encrypt connections 
-   TLS refers to transport Layer security , which is a newer version
-   Nowadays , TLS cert are mainly used , but SSL refer
-   Public ssl cert ase issues by (CA)
-   SSL cert have an exp ( you set ) and must be renewed
Load Balancer - SSL Cert 
-   The load Balancer uses an X509 cert (SSL/TLS)
-   You can manage cert usign ACM
-   You can create upload your own cert alternatively
    HTTPS Listener : 
    +   You must specify a default cert
    +   add an option of cert when support multi domain
    +   Clients can use SNI(Server Name indi) to specify hostname
    +   ability to specify a security policy to support SSL/TLS

SSL -  Server Name Indication
-   SNI solves the problem of loading multi SSL cert onto one web Server
-   It's a "newer" protocol, and requies the client to indicate the hostname
    of the target server in the initial SSL 
-   The server will then find the correct cert , of return the default one
    Note : 
        +   Only work for ALB-NLB
        +   Does not work for CLB
ELB - SSL cert
-   Classic Load Balancer (v1)
    +   support only one SSL cert
    +   Must use multi CLB for multi host with multi cert
-   Application Load Balancer (v2)
    +   Support multi Listener with multi SSL cert
    +   Uses SNI to make it work
-   Network Load Balancer (v2)
    +   Support multi Listener with multi cert 
    +   Users SNI

Connection Draining
-   Feature naming
    +   Connection Draining : CLB
    +   Deregistration : ALB - NLB
-   Time to complete "in flight request " while the instance is 
    de-registering or unhealthy
-   Stops sending new request to ec2 instance which ism  de-registering
-   Between 1 to 3600 sec (default as 300 , 0 as disabled)
-   Set to a low value if your request are short 
Auto scalling Group? 
-   The goal of Auto Scalling Group(ASG) is to :
    +   Scale out (add EC2 instance) to match an increased Load
    +   Scale in (remove EC2 instance) to match a decrease load 
    +   Ensure we have a minium and a maximum number of ec2 instances running
    +   Auto matically register new instances to a load balancer 
    +   Re-create an EC2 instance in case a previous one is terminated
-   ASG are free ( but as pay for the underlying EC2 )
Auto Scalling Group Attr
-   A Lunch Template 
    +   AMI  and Instance Type 
    +   EC2 User Data
    +   EBS volumes
    +   Security Groups
    +   SSH key pair 
    +   IAM roles for Your EC2 instances
    +   Network + Subnet Infor 
    +   Load Balancer infor 
-   Minsize / Maxsize / Intial Capacity
-   Scaling Policies
Auto Scalling - CloudWatch Alarams and Scalling 
-   It is possible to scale an ASG based on CloudWatch alarms 
-   An Alarm monitors a metric (such as Average CPU , or a custom metric)
-   Metrics such as Average CPU are computed for the overall ASG instances
-   Based on the alarm : 
    +   We can create scale-out policies (increase  number instance)
    +   We can create scale- policies (decrease  number instance)

ASG - Dynamic Scalling Policies
-   Target Tracking Scaling
-   Simple/Step Scalling 
    +   When a Cloudwatch alarm is trigger ( >  : add unit )
    +   When a Cloudwatch alarm is trigger ( <  : remove)
-   Scheduled Application  
    +   Anticipate a scaling based on known usage pattern 

ASG - Predictive Scalling 
    +   Predictive scalling : continuously forecast load and schedule scaling ahead

ASG - Good metrics 
    -   CPU Utilization : Average CPU utilization across your instances 
    -   RequestCountPerTarget : to make sure the number of requests per EC2 instances is stable 
    -   Average Network I/O 
    -   Any custom metric (using Cloudwatch)
ASG - Scalling Coldowns
-   After a scaling activity happens, you are in the 
    cooldown period (default 300s )
-   During the coldonw period, the ASG will not 
    launch or terminate additional instances
-   Advice : Use a ready-to-use API to reduce config time in 
    order to be serving req faster and reduce the cooldown period

ASG for SA
-   ASG default Termination Policy 
    1 : find the az which has the most number of instance
    2 : if there are multi instance in the az to choose from,
    delete the one with the oldest launch config
-   ASG tries the balance the number of instances across AZ by default 

ASG for SA - Lifecycle hook 
-   By default as soon as an instance is launched in an ASG it's in service
-   You have the ability to perform extra steps before instance goes in service
-   you have the ability to perform some actions before instance is terminated

ASG for SA - Launch Template vs Launch configurations
-   Both:
    +   ID of the Amazon Machine Image (AMI) , the intsance type , a key pair 
    security groups and the other param(e.g : ec2 user-data) that you
    use to launch EC2 instance 
-   Launch Config (legacy)
    +   Must be re-created every time 
-   Launch Template (newer)
    +   Can have multiple versions
    +   Create pram subsets
    +   Provision using both On-Demand and Spot instances
    +   Can use T2 unlimited burst Feature
    +   Recommended by AWS going forward

Section 9 : 
AWS RDS Overview
-   RDS stands for Relational Database service
-   it's a managed DB service for DB use SQL as a query language
-   It allows you to create databases in the cloud that are managed by AWS
    +   Postgres
    +   MySQL
    +   MariaDB
    +   Oracle
    +   Microsoft SQL Server
    +   Aurora (not critial remember it )

Advantage over using RDS versus deploying DB on ec2
-   RDS us a managed service:
    +   Automated provisioning , OS patching 
    +   Continuous backups and restore to specific timestamp
    +   Monitoring dashboards 
    +   Read replicas for improved read performance
    +   Multi AZ setup for DR (Disaster Recovery)
    +   Scaling capability (vertical and horizontal)
    +   Storage backed by EBS (gp2 or io1)
-   BUT you CAN't SSH into your instances

RDS backups
-   Backups are automatically enabled in RDS
-   Automated backups: 
    +   Daily full backup of the database 
    +   Transaction logs are backed-up by RDS every 5 minutes
    => ability to restore to any point in time (5 min)
    +   7 days retention (can be increased to 35 days )
-   DB Snapshots:
    +   Manually triggered by the user
    +   Retention of backup for as long as you want

RDS -  Storage Auto Scalling 
-   Helps you increase Storage on your RDS DB instance dynamically
-   When RDS detects you are running out of free database storage, it scales auto
-   Avoid manually scaling your database storage
-   you have to set MAXIMUM STORAGE THRESHOLD 
-   Automatically modify storage if :
    +   Free storage is less than 10% of allocated storage
    +   Low-storage lasts at least 5 min
    +   6 hours have passed since last modification
-   Useful for appications with unpredictable workloads
-   Supports all RDS database engines

RDS Read Replicas for read scalability
-   UP TO 5 READ REPLICAS
-   With in AZ, Cross Az or Cross Region
-   Replication is ASYNC so read are eventtually consistent
-   Replicas can be promoted to their own DB

RDS Read Replicas - Use Cases 
-   You have o production database that is taking on normal load
-   You want to run a reporting application to run some analytics
-   You create a read replica to run the new workload there
-   The production application is unaffected
-   Read replicas are used for SELECT (=read) only kind of statements
    (not INSERT, UPDATE , DELETE)

RDS - Network Cost

-   same AZ with other region : free (vd : us-east-1a <> us-east-1b)
-   other AZ same region : not free (vd : us-east-1a <> eu-west-1b)

RDS Multi AZ (Disaster Recovery)
-   SYNC Replication
-   One DNS name - automatic app failover to standby
-   Increase availability
-   Failover in case of loss of AZ, loss of network, instance or storage failure
-   No manual intervention in apps
-   Not used for scaling
+   Note : The Read Replicas be setup as MULTI AZ for Disaster Recovery

RDS - FROM Single-AZ to multi AZ
-   Zero downtime operation
-   Just click on "modify" for the database config
-   The following happens internally
    +   A snapshot is taken
    +   A new DB is restored from the snapshot in a new AZ 
    +   Synchonization is established between the two databases 

RDS Security - Encryption
-   At rest encryption 
    +   Possibility to encrypt the master and replicas with AWS-AES 256
    +   Encryption has to be defined at lunch time
    +   If the master is not encrypted , the read replicas cannot be encrypted
    +   Transparent Data Encryption (TDE) available for Oracle and SQL Server
-   In Flight encryption
    +   SSL cert options with trust cert when connecting to database
    +   Provide SSL options with trust cert when connecting to database 
    +   To enforce SSL:
        *   PostgreSQL : _ssl = l in the AWS RDS Console
        *   My SQL : with in the DB  .... REQUIRE SSL
RDS Encryption operations 
-   Encrypting RDS Backups
    +   Snapshots of un-encrypted RDS databases are un-encrypted
    +   Snapshots of encrypted RDS databases are encrypted
    +   Can copy a snapshot into an encrypted one 
-   To encrypt an un-encrypted RDS database 
    +   Create a snapshot of the un-encrypted database
    +   Copy the snapshot and enable encryption for the snapshot
    +   Restore the database from the encrypted snapshot
    +   Migrate applications to the new database , and delete the old database

RDS Security - Network & IAM
-   Network Security
    +   RDS databases are usually deployed within a private subnet, not a public one
    +   RDS security work by leveraging security groups- it controls
    with IP/Security group can COMMUNICATE with RDS 
-   Access Management 
    +   IAM policies help control who can manage AWS RDS
    +   Traditional Username and Password can be used to login into the database 
    +   IAM-based authen can be used to login into RDS MySQL  & PostgreSQL

RDS - IAM authen
-   IAM database authen work with MYSQL AND POSTGRESQL
-   You don't need a password, just an authen token obtained thorugh IAM - RDS API
-   Auth token expired when after 15min
-   Benefits : 
    +   Network in/out must be encrypted using SSL
    +   IAM to centrally manage users instead of DB 
    +   Can Ieverage IAM Roles and EC2 Instance profiles for easy integration 

RDS Security - Summary 
-   Encryption at rest
    +   Is done only when you first create the DB instance
    +   or : unencrypted DB => snapshot => copy snapshot as encrypted
        => create DB from snapshot 
-   Your responsibility
    +   Check the ports / IP / Security group inbound rules in DB's SG
    +   In-database user creation and permissions or manage through IAM
    +   Creating a database with or without public acess 
    +   Ensure param group or DB is configured to only allow SSL 
-   AWS responsibility
    +   No SSH access 
    +   No manual DB patching 
    +   No manucal OS patching 
    +   No way to audit the underlying instance

RDS Security - encryption
-   At rest encryption
    +   Possibility to encrypt the master & the read replicas with AWS KMS - AES - 256 encryption
    +   Encryption has to be defined at lunch time 
    +   If the master is not encrypted , the read replicas CANNOT be encrypted
    +   Transparent Data Encryption(TDE) available for Oracle and SQL Server
-   In-flight encryption
    +   SSL cert to encrypt data to RDS in flight 
    +   Provide SSL options with trust cert when connecting to database 
    +   To enforce SSL : 
        *   PostgreSQL : as Params Group ( rds.force_ssl  = 1 )
        *   MySQL : with in the DB query  ( ...... + REQUIRE SSL)

RDS Encryption operation
-   Encrypting RDS backup
    +   Snapshots of un-encrypted RDS database are un-encrypted
    +   snapshot of encrypted RDS database are encrypted
    +   Can copy a snapshot into an encrypted one
-   To encrypt an un-encrypted RDS database 
    +   Create a snapshot of the un-encrypted database
    +   Copy a snapshot and enable encryption for the snapshot
    +   Restore the database from the encrypted snapshot
    +   Migrate application to the new database, and delete the old database

RDS Security - Network & IAM
-   Network security
    +   RDS database are usually deployed within private subnet,not a public one
    +   RDS security work by leveraging SECURITY GROUPS - it controls which IP /
        Security group can COMMUNICATE with RDS
-   Access Management
    +   IAM policies help control who can MANAGE AWS RDS (through the RDS API)
    +   Traditional Username and Password can be used to LOGIN INTO the database
    +   IAM-based authen can be used to login into RDS MYSQL & PostgreSQL

RDS - IAM Authen
-   IAM database authen work MYSQL - PostgreSQL
-   You don't need a password,just an authen token obtained through IAM-RDS called
-   Auth token expried than 15min
-   Benefits:
    +   Network i/o must be encrypt using SSL
    +   IAM to centrally manage users instead of DB
    +   Can leverage IAM ROles and EC2 Instance profiles for easy integration


RDS Security - Summary 
-   Encryption at rest : 
    +   Is done only when you first create the DB Instance
    +   Or : unencrypted DB => snapshot => copy snapshot as encrypted
        => Create DB from snapshot
-   Your responsibility
    +   Check the ports/ IP / security group inbound rules in DB's SG
    +   In-database user creation and permissions or manage through IAM
    +   Creating a database with or without public access
    +   Ensure param group or DB is config to only allow SSL connection
-   AWS responsibility
    +   No SSH access
    +   No manual DB patching 
    +   No manual OS patching
    +   No way to audit the underlying instance

Amazon Aurora 
-   is proprietary from AWS (not open source)
-   Postgres and MYSQL are both supported as Aurora DB
-   Aurora is "AWS cloud optimized" and claims 5x perform improvement over MYSQL
    on RDS , over 3x the performance of Postgres on RDS
-   Aurora storage automatically grows in increments of 10gb , upto 128gb
-   Aurora can have 15 replicas while MYSQL as 5,and the replication process faster
-   Failover in Aurora is instantaneous. It's HA native
-   Aurora costs more than 20% RDS - but is more efficient 

Aurora high availability and read scaling 
-   6 copies of your data across 3az
    +   3 copies out of 6 need for read
    +   self healing with peer-to-peer replication
    +   Storage is striped across 100s of volumes
-   One Aurora instance takes writes ( master )
-   Automated failover for master in less than 30s 
-   master + up to 15 Aurora Read Replicas serve needs
-   Support for cross region replication

Feature of Aurora
-   Automatic failover
-   Backups and Recovery
-   Isolation and security
-   Industry compliance
-   Push - button scaling 
-   Automated Patching with Zero Downtime
-   Advanced Monitoring 
-   Routine Maintenance
-   Backtrack: restore data at any point of time without using backup

Aurora security
-   Similar to RDS b.c uses the same engines
-   Encryption at rest using KMS
-   Automated backups , snapshots and replicas are also encrypted
-   Encryption in flight using SSL 
-   POSSIBILITY TO AUTHEN USING IAM TOKEN 
-   You are responsible for protecting the instance with security groups 
-   you can't SSH

Aurora Serverless 
-   Automated database instantiation and auto - scaling based on actual usage
-   good for infrequent , intermittent or unpredictable workload
-   no capability planning need
-   pay per seconds , can be more cost effect
Global Aurora 
-   Aurora Cross Region read replicas 
    +   Useful for disaster Recovery
    +   Simple to put in place
-   Aurora Global database (Recommended)
    +   I primary Region (read/write)
    +   Up to 5s (read-only) regions , replication lag is less than I second
    +   Up to 15 Read replica per second region
    +   Helps for decrasing latency
    +   Promoting another region  has an RTO of < I minutes

Aurora ML 
-   Enables you to add ML-based prediction to your application via SQL
-   Simple , optimized, and secure integration between Aurora and AWS ML services
-   Supported services 
    +   Amazon Sage maker
    +   Amazon comprehend
-   You don't need to have ML experience 
-   Use cases : fraud detection , ads targeting , sentiment analysis
    product Recommendedations 

Amazon ElastiCache Overview
-   The same way RDS is to get managed Relational Database...
-   ElastiCache is to get managed Redis or Memcached 
-   Caches are in-memory databases with really high performance , low latency
-   Helps reduce load off of databases for read intensive workloads
-   Helps make your application stateless
-   AWS takes care of OS Maintenance / patching , optimizations , setup, config
    Monitoring , failure recovery and backups 
-   USING ELASTICACHE INVOLVES HEAVY APP CODE CHANGES 

ElastiCache SA - DB Cache 
-   Application qurey ElastiCache, if not available
    get from RDS and store in ElastiCache 
-   Helps relieve load in RDS
-   Cache must be an invalidation strategy to make sure only the most
    current data is used in there 

ElastiCache SA - User Session store
-   User logs into any of the application
-   The application writes the session data into ElastiCache
-   The user hits another instance of our application
-   The instance retrieves the data and the user is already logged in 

ElastiCache -  Redis vs Memcached
Redis : 
-   Multi AZ with Auto-failover 
-   Read Replicas to scale read and have high availability
-   Data Durability using AOF persistence
-   BACKUP AND RESTORE FEATURE 
Memcached : 
-   Multi-node for partitioning of data (sharding )
-   No high availability (replication)
-   Non persistent
-   No backup and restore 
-   Multi  threaded achitecture 

ElastiCache - Cache Security
-   All caches in ElastiCache
    +   DO NOT SUPPORT IAM AUTHEN
    +   Iam policies on ElastiCache are only useds for AWS API-level security
-   REDIS AUTH 
    +   You can set a "password/token" when you create a redis cluster
    +   This is an extra level of security for your cache 
    +   Support SSL in flight encryption
-   Memcached
    +   Supports SASL-based authen

Patterns for ElastiCache
-   LAZY LOADING  
-   WRITE THROUGH
-   SESSION STORAGE "
-   Quote:There are only two hard things in Computer Science:cache invalid & naming

ElastiCache - Redis UseCase 
-   Gaming Leaderboards are computationally complex
-   Redis Sorted sets gurantee both uniqueness and element ordering 
-   Each time a new element added, it's ranked in realtime, then add in correct order

Note for session 9 : LIST PORT Familiar
-   You should be able to differentitate between an important HTTPS - 443
    and Database port ( PostgreSQL  - 5432 )
-   IMPORTANT PORTS : 
    +   FTP : 21
    +   SSH : 22
    +   SFTP : 22 (same as SSH)
    +   HTTP : 80
    +   HTTPS : 443
    RDS DATABASE PORTS : 
    +   PostgreSQL : 5432
    +   MySQL : 3306
    +   Oracle RDS : 1521
    +   MariaDB : 3306
    +   Aurora: MySQL + PostgreSQL


Section 10 : Route 53
What is DNS
-   Domain name system which translates the human friendly hostnames into The
    machine IP address
-   www.google.com => 172.217.18.36
-   DNS is the backbone of the internet
-   DNS uses hierarchial naming structure 

DNS Terminologies
-   DOMAIN REGISTRAR 
-   DNS RECORDS
-   ZONE FILE 
-   NAME SERVER
-   TOP LEVEL DOMAIN (TLD)
-   SECOND LEVEL DOMAIN

Amazon Route 53
-   A highly available, scalable , fully managed and authortative DNS 
    +   Authortative  =the customer (you) can update the DNS records 
-   Route 53 is also a Domain REGISTRAR
-   Ability to check the health of your resuorces 
-   The only AWS service which provides 100%
-   Why route 53 ? 53 is a reference to the traditional DNS port 

Route 53 - Records 
-   Each record contains : 
    +   DOMAIN / SUBDOMAIN NAME 
    +   Record Type 
    +   Value 
    +   Routing policy
    +   TTL
-   Route 53 supports the following DNS record types 
    +   (must know ) A / AAAA / CNAME / NS 

Route 53 - Record Types 
-   A : maps a hostname to IPv4
-   AAAA : maps a hostname to IPv6
-   CNAME : maps a hostname to another hostname 
    +   The target is a domain name which must have an A or AAAA record 
    +   Can't crate a CNAME record for the top node of a DNS namespace (Zone Apex)
-   NS - Name Servers for the Hosted Zone 
    +   Control how traffic is routed for a domain  

Route 53 - Hosted Zones 
-   A container for records that define how to route traffic to a domain and sub it
    +   PUBLIC HOSTED ZONES 
    +   PRIVATE HOSTED ZONES
-   You pay $0.5/month with 1 hosted zone 

Route 53 - Records TTL (Time to Live)
-   High TTL - vd 24hr
    +   Less trafic on route 53
-   Low TTL - vd 60sec
    +   More traffic on route 53
    +   Records are outdated for less time 
    +   Easy to change records
-   EXCEPT FOR ALIAS RECORDS , TTL IS MANDATORY FOR EACH DNS RECORDS 
 
CNAME vs ALIAS
-   AWS Resources (Load Balancer , CloudFront...) expose an aws hostname :
-   CName : 
    +   Points a hostname to any other hostname
    +   ONLY FOR NON ROOT DOMAIN 
-   Alias : 
    +   Points a hostname to an AWS resource 
    +   Works for ROOT DOMAIN and NON ROOT DOMAIN
    +   Free of charge
    +   Native health check

Route 53 - Alias Records Targets 
-   Elastic Load Balancer
-   cloudFront Distribution
-   Api Gateway
-   Elastic Beanstalk environments
-   S3 Websites
-   VPC Interface Enpoints
-   Global Accelerator
-   Route 53 records in the same hosted zone 
-   YOU CANNOT SET AN ALLIAS RECORDS FOR AN EC2 DNS name 

Route 53 - Routing policies 
-   Define how Route 53 responds to DNS queries 
-   Don't get confused by the word "Routing "
    +   It's not the same as Load balancer routing which routes the traffic 
    +   DNS does not route any traffic , it only responds to the DNS queries
-   Route 53 Supports the following Routing policies 
    +   Simple 
    +   Weighted 
    +   Failover
    +   Latency based
    +   Geolocation
    +   Multi-value Answer
    +   Geoproximity (using Route 53 Traffic Flow feature)

Routing Policies - Simple
+   Typlically, route traffic to a single resource
+   Can specify multiple values in the same record
+   If multiple values values are returned, a random one is chosen by the client
+   When alias enabled , specify Only One AWS resource
+   Can't be associated with health checks

Routing Policies - Weighted
+   Control the % of the request that go to each specific resource
+   Assign each record a relative weight :
    Traffic (%) = Weight for a record / sum all weight for all records 
+   DNS Records MUST HAVE SAME NAME - TYPE
+   Can be associated with Health checks
+   Use cases : Load balancing between regions , testing new application versions
+   Assign a weight of 0 to a record to stop sending traffic to a resource
+   If all records have weight of 0, then all records will be returned equally 

Routing policies - Latency - based 
+   Redirect to the resource that has the least latency close to us 
+   Super helpful when latency for users is a priority
+   Latency is based on traffic between users and AWS Regions 
+   Germany users maybe directed to the US (if that's the lowest latency )
+   Can be associated with Health Checks (has a failover capability)

Route 53 - Health Checks 
-   HTTP health checks ONLY PUBLIC RESOURCES
-   Health Check => Automated DNS Failover
    1 : Health checks that monitors an enpoint 
    2 : Health checks that montior other health checks
    3 : Health checks that monitor Cloudwatch Alarms 
-   Health Checks are intergated with CW metrics

Health checks - Montior an Endpoint 
-   About 15 global health checker will check the enpoint health
    +   Healthy / unhealthy Threshold 
    +   Interval - 30s
    +   Supported protocol: HTTP,HTTPS and TCP 
    +   If > 18% of health checkers report the enpoint is healthy , Route 53
        considers it Healthy. Otherwise , it's unhealthy
    +   Ability to choose which locations you want Route 53 to use
-   Health Checks pass only when the endpoint responds with the 2xx and 3xx status
-   Health checks  pass/fail based on the text in the first 5120b / response
-   Config you router/firewall to allow incoming req from Route 53 health checks

Route 53 - Calculated Health checks
-   Combines the results of multiple Health checks into a single health check
-   You can use OR , AND , or NOT 
-   Can monitor up to 256 Child Health Checks
-   Specify how many of the health checks need to pass to make the parent pass
-   Usage:perform maintenance your website without causing all health check to fail

Health checks - Private hosted zones 
-   Route 53 health checkers are outside the VPC
-   They can't access private endpoints
-   You can create a CloudWatch METRIC and associated a CloudWatch ALARM,
    Then create a Health check that check the alarm itself

Route Policies - Geolocation
-   different from Latency-based!
-   THIS ROUTING IS BASED ON USER LOCATION 
-   Specify location by Continent , Country or by US State 
-   Should create a Default record 
-   Use cases: website localization, restrict content distribution, load balancing
-   Can be associated with Health Check

Geoproximity Routing Policy
-   Route traffic to your resources based on the geographic location of user
-   Ability TO SHIFT MORE TRAFFIC TO RESOURCES BASED on the defined BIAS
-   To change the size of the geographic region , specify BIAS values: 
    +   To expand (1 to 99) - more traffic to the resource
    +   To shrink (-1 to 99) - less traffic to the resource
-   Resources can be :
    +   AWS resources 
    +   Non-AWS Resources
-   You MUST USE ROUTE 53 TRAFFIC FLOW to use THIS FEATURE

Routing policies - Multi value 
-   Use when routing traffic to multiple resources 
-   Route 53 return multiple values / resources 
-   Can be associated with health checks 
-   Up to 8 healthy records are returned for each multi-value query
-   Multi value is not a substitue for having an ELB 

Domain Registar vs DNS service
-   You buy or register your domain name with a Domain Registar typlically by 
    paying annual charges (domain company )
-   The domain Registar provides you with a DNS service to manage your DNS record
-   But u can use another DNS service to manage your DNS records
-   E.g:Purchase the domain from Go Daddy and use Route 53  manage your DNS record

3rd Party Registar with amazon route 53
-   u buy your domain on 3rd party Registar,u use Route 53 as DNS service provider
    +   Create a Hosted zone in Route 53
    +   Update NS records on 3rd party website to use Route53 NAME SERVERS 
    +   DOMAIN REGISTRAR != DNS service
    +   But every Domain Registar usually comes with some DNS Features 